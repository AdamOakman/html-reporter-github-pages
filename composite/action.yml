name: 'html-reporter-gh-pages'
description: 'Github Pages HTML Test Results with history'
author: 'Pavan Mudigonda'
branding:
  icon: 'layout'
  color: 'green'
inputs:
  env:
    description: 'Environment'
    required: false
    default: 'QA'
  token:
    description: 'default Github token'
    required: false
    default: ${{ github.token }}
  test_results:
    description: 'test result data dir'
    required: true
  gh_pages:
    description: 'Folder with gh-pages branch'
    required: false
    default: 'gh-pages'
  results_history:
    description: 'Folder for allure history'
    required: false
    default: 'results-history'
  subfolder:
    description: 'subfolder'
    required: false
    default: ''
  keep_reports:
    description: 'Keep X last reports'
    required: false
    default: '20'
  github_run_num:
    description: 'GitHub Actions build number'
    required: false
    default: ${{ github.run_number }}
  github_run_id:
    description: 'GitHub Actions run id'
    required: false
    default: ${{ github.run_id }}
  github_repo:
    description: 'GitHub repository'
    required: false
    default: ${{ github.repository }}
  report_url:
    description: 'Use a custom URL instead of *.github.io'
    required: false
    default: '' 
  external_repository:
    description: 'External GitHub repository'
    required: false
    
outputs:
  url:
    description: 'GH Page URL'
    value: ${{ steps.gh_page.outputs.GH_PAGES_URL }}
runs:
  using: 'composite'    
  steps:

    - name: Get test results history
      uses: actions/checkout@v3
      if: always()
      continue-on-error: true
      with:
        ref: ${{ inputs.gh_pages }}
        path: ${{ inputs.gh_pages }}

    - name: GH Pages History Bash Script
      shell: bash
      env: 
        ENV: "${{ inputs.env }}"
        TOKEN: "${{ inputs.token }}"
        TEST_RESULTS: "${{ inputs.test_results }}"
        GH_PAGES: "${{ inputs.gh_pages }}"
        RESULTS_HISTORY: "${{ inputs.results_history }}"
        SUBFOLDER: "${{ inputs.subfolder }}"
        KEEP_REPORTS: "${{ inputs.keep_reports }}"
        GITHUB_RUN_NUM: "${{ inputs.github_run_num }}"
        GITHUB_RUN_ID: "${{ inputs.github_run_id }}"
        REPO: "${{ inputs.github_repo }}"
        REPORT_URL: "${{ inputs.report_url }}"
      run: |
        cat > index-template.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
          <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
          <title>Test Results</title>
          <style type="text/css">
            BODY { font-family : monospace, sans-serif;  color: black;}
            P { font-family : monospace, sans-serif; color: black; margin:0px; padding: 0px;}
            A:visited { text-decoration : none; margin : 0px; padding : 0px;}
            A:link    { text-decoration : none; margin : 0px; padding : 0px;}
            A:hover   { text-decoration: underline; background-color : yellow; margin : 0px; padding : 0px;}
            A:active  { margin : 0px; padding : 0px;}
            .VERSION { font-size: small; font-family : arial, sans-serif; }
            .NORM  { color: black;  }
            .FIFO  { color: purple; }
            .CHAR  { color: yellow; }
            .DIR   { color: blue;   }
            .BLOCK { color: yellow; }
            .LINK  { color: aqua;   }
            .SOCK  { color: fuchsia;}
            .EXEC  { color: green;  }
          </style>
          </head>
          <body>
            <h1>Test Results</h1><p>
            <a href=".">.</a><br>
          EOF
          export TZ="/usr/share/zoneinfo/America/Toronto";
          DATE_WITH_TIME=`date "+%Y-%m-%d %H:%M:%S %Z"`;
          mkdir -p ./${GH_PAGES}
          mkdir -p ./${TEST_RESULTS}
          mkdir -p ./${RESULTS_HISTORY}
          cp -r ./${GH_PAGES}/. ./${RESULTS_HISTORY}

          REPOSITORY_OWNER_SLASH_NAME=${GITHUB_REPO}
          REPOSITORY_NAME=${REPOSITORY_OWNER_SLASH_NAME##*/}
          GITHUB_PAGES_WEBSITE_URL="https://${GITHUB_REPO_OWNER}.github.io/${REPOSITORY_NAME}"
          #echo "Github pages url $GITHUB_PAGES_WEBSITE_URL"


          if [[ ${SUBFOLDER} != '' ]]; then
              RESUTLS_HISTORY="${RESULTS_HISTORY}/${SUBFOLDER}"
              GH_PAGES="${GH_PAGES}/${SUBFOLDER}"
              echo "NEW results history folder ${RESULTS_HISTORY}"
              mkdir -p ./${RESULTS_HISTORY}
              GITHUB_PAGES_WEBSITE_URL="${GITHUB_PAGES_WEBSITE_URL}/${SUBFOLDER}"
              echo "NEW github pages url ${GITHUB_PAGES_WEBSITE_URL}"
          fi

          if [[ ${REPORT_URL} != '' ]]; then
              GITHUB_PAGES_WEBSITE_URL="${REPORT_URL}"
              echo "Replacing github pages url with user input. NEW url ${GITHUB_PAGES_WEBSITE_URL}"
          fi

          COUNT=$( ( ls ./${RESULTS_HISTORY} | wc -l ) )
          echo "count folders in results-history: ${COUNT}"
          echo "keep reports count ${KEEP_REPORTS}"
          KEEP_REPORTS=$((KEEP_REPORTS+1))
          echo "if ${COUNT} > ${KEEP_REPORTS}"
          if (( COUNT > KEEP_REPORTS )); then
            cd ./${RESULTS_HISTORY}
            echo "remove index.html last-history"
            rm index.html last-history -rv
            echo "remove old reports"
            ls | sort -n | head -n -$((${KEEP_REPORTS}-2)) | xargs rm -rv;
            cd ${GITHUB_WORKSPACE}
          fi

          cat index-template.html > ./${RESULTS_HISTORY}/index.html

          echo "├── <a href="./${GITHUB_RUN_NUM}/index.html">${ENV} RUN# ${GITHUB_RUN_NUM} - ${DATE_WITH_TIME}(Latest)</a><br>" >> ./${RESULTS_HISTORY}/index.html;
          ls -l ./${RESULTS_HISTORY} | grep "^d" | sort -nr | awk -F' ' '{print $9;}' | sed 's/last-history//' | while read line;
              do	    
            curl \
              --silent \
              --location \
              --request GET \
              --header 'Accept: application/vnd.github.v4+json' \
              --header 'Content-Type: application/json' \
              --header "Authorization: token ${TOKEN}" \
              --header 'cache-control: no-cache' \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" > temp.json;
              
            CREATED_AT=$(cat temp.json | jq --argjson "RUN_NUM" "${line}" -r '.created_at');
            NEW_CREATED_AT=`sed -e 's/T/ /' -e 's/Z/ UTC/' <<<"$CREATED_AT"`
            echo "├── <a href="./"${line}"/">${ENV} RUN# "${line}" -  "${NEW_CREATED_AT}" </a><br>" >> ./${RESULTS_HISTORY}/index.html;
              done;
          echo "</html>" >> ./${RESULTS_HISTORY}/index.html;

          #echo "executor.json"
          echo '{"name":"GitHub Actions","type":"github","reportName":"Test Results Report with history",' > executor.json
          echo "\"url\":\"${GITHUB_PAGES_WEBSITE_URL}\"," >> executor.json # ???
          echo "\"reportUrl\":\"${GITHUB_PAGES_WEBSITE_URL}/${GITHUB_RUN_NUM}/\"," >> executor.json
          echo "\"buildUrl\":\"https://github.com/${GITHUB_REPO}/actions/runs/${GITHUB_RUN_ID}\"," >> executor.json
          echo "\"buildName\":\"GitHub Actions Run #${GITHUB_RUN_ID}\",\"buildOrder\":\"${GITHUB_RUN_NUM}\"}" >> executor.json
          #cat executor.json
          mv ./executor.json ./${TEST_RESULTS}

          #environment.properties
          echo "URL=${GITHUB_PAGES_WEBSITE_URL}" >> ./${TEST_RESULTS}/environment.properties

          echo "keep test results history from ${GH_PAGES}/last-history to ${TEST_RESULTS}/history"
          mkdir -p ${TEST_RESULTS}/history
          cp -R ./${GH_PAGES}/last-history/. ./${TEST_RESULTS}/history

          echo "generating report from ${TEST_RESULTS} to ${TEST_REPORT} ..."
          ls -l ${TEST_RESULTS}
          #echo "listing report directory ..."

          echo "copy test-results to ${RESULTS_HISTORY}/${GITHUB_RUN_NUM}"
          cp -R ./${TEST_RESULTS}/. ./${RESULTS_HISTORY}/${GITHUB_RUN_NUM}
          echo "copy test-results history to /${RESULTS_HISTORY}/last-history"
          cp -R ./${TEST_RESULTS}/history/. ./${RESULTS_HISTORY}/last-history

#     - name: Deploy report to Github Pages
#       if: ${{ inputs.external_repository }} == ''
#       uses: peaceiris/actions-gh-pages@v3.8.0
#       with:
#         github_token: ${{ inputs.token }}
#         publish_branch: ${{ inputs.gh_pages }}
#         publish_dir: ${{ inputs.results_history }}
#         keep_files: true

    - name: Deploy report to Github Pages
#       if: ${{ inputs.external_repository }} != ''
      uses: peaceiris/actions-gh-pages@v3.8.0
      with:
        github_token: ${{ inputs.token }}
        publish_branch: ${{ inputs.gh_pages }}
        publish_dir: ${{ inputs.results_history }}
        keep_files: true
        external_repository: ${{ inputs.external_repository }}
        
    - name: get gh pages url and set outpu
      id: gh_page
      shell: bash
      run: |
        if [[ "${{ inputs.external_repository }}" -eq '' ]]; 
        then
          GH_PAGES_API="https://api.github.com/repos/${{ github.repository }}/pages"
        elif [[ "${{ inputs.external_repository }}" -ne '' ]]
        then
          GH_PAGES_API="https://api.github.com/repos/${{ inputs.external_repository }}/pages"
        fi
        
        curl -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ inputs.token }} " $GH_PAGES_API > gh-pages.json
        GH_PAGES_URL=$(jq -r '.html_url' gh-pages.json | tr -d '"' | xargs)
        echo $GH_PAGES_URL
        echo GH_PAGES_URL=$GH_PAGES_URL >> $GITHUB_ENV
        echo "##[set-output name=GH_PAGES_URL;]${GH_PAGES_URL}"
        cat >> gh-pages.md << EOF
          GH Page URL: ${GH_PAGES_URL}
        EOF
        # Publish Job Summary
        cat gh-pages.md >> $GITHUB_STEP_SUMMARY          
 
